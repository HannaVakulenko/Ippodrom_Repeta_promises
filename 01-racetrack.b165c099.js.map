{"mappings":"YAAA,IAAMA,EAAS,CACb,cACA,UACA,kBACA,aACA,cAGEC,EAAc,EAEZC,EAAO,CACXC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BA8BpC,SAASI,EAAkBC,GACzBR,EAAKI,YAAYK,YAAcD,C,CAGjC,SAASE,EAAoBF,GAC3BR,EAAKK,cAAcI,YAAcD,C,CAYnC,SAASG,EAAIC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GACjB,IANmBC,EAAKC,EAMlBC,GANaF,EAMQ,IANHC,EAMS,KAL5BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WACTP,EAAQ,CAAEF,QAAOK,Q,GAChBA,E,IAlDPjB,EAAKC,SAASqB,iBAAiB,SAE/B,WACEvB,GAAe,EACf,IAAMwB,EAAWzB,EAAO0B,IAAIb,GAE5BJ,EAAkB,IACEG,EAAA,gDAOGe,EANPF,EAOhBV,QAAQa,KAAKD,GAASE,MAAK,SAAAC,G,IAAGhB,EAAKgB,EAALhB,MAAOK,EAAIW,EAAJX,KACnCV,EAAkB,GAA8CsB,OAA3CjB,EAAM,uCAA0CiB,OAALZ,IAmBpE,SAA2BW,G,IAAEE,EAAFF,EAAEG,YAAanB,EAAfgB,EAAehB,MAAOK,EAAtBW,EAAsBX,KACzCe,EAAK,WAAkCH,OAAvBC,EAAY,aAA4BD,OAAjBjB,EAAM,aAAgBiB,OAALZ,EAAK,cACnEjB,EAAKM,UAAU2B,mBAAmB,YAAaD,E,CApB7CE,CAAkB,CAAEH,YAAAhC,EAAaa,QAAOK,Q,IAI5C,SAAoBQ,GAClBZ,QAAQsB,IAAIV,GAASE,MAAK,SAAAC,GAAQA,EAALhB,MAAWgB,EAAJX,KAClCP,EAAoB,uC,IAdtB0B,CAAWb,GAKb,IAAyBE,C","sources":["src/js/01_racetrack.js"],"sourcesContent":["const horses = [\n  'Secretariat',\n  'Eclipse',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscuit',\n];\n\nlet raceCounter = 0;\n\nconst refs = {\n  startBtn: document.querySelector('.js-start-race'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  raceCounter += 1;\n  const promises = horses.map(run);\n\n  updateWinnerField(''); // очищаем имя победителя\n  updateProgressField('The Race has started, bids are not accepted!');\n  determineWinner(promises);\n  waitForAll(promises);\n}\n\n//horsesP - це промиси\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerField(`${horse} is a winner, the finished time is ${time}`);\n    updateResultTable({ raceCounter, horse, time });\n  });\n}\n\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(({ horse, time }) => {\n    updateProgressField('The Race is over, bids are accepted!');\n  });\n}\n\nfunction updateWinnerField(message) {\n  refs.winnerField.textContent = message;\n}\n\nfunction updateProgressField(message) {\n  refs.progressField.textContent = message;\n}\n\nfunction updateResultTable({ raceCounter, horse, time }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\n//console.log(promises);\n\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(`${horse} is a winner, the finished time is ${time}`);\n// });\n\n// Promise.all(promises).then(({ horse, time }) => {\n//   console.log('Check-in is over, bids are accepted.');\n// });\n\n//run('Mango').then(x => console.log(x));\n"],"names":["$429f368ed271f71c$var$horses","$429f368ed271f71c$var$raceCounter","$429f368ed271f71c$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$429f368ed271f71c$var$updateWinnerField","message","textContent","$429f368ed271f71c$var$updateProgressField","$429f368ed271f71c$var$run","horse","Promise","resolve","min","max","time","Math","floor","random","setTimeout","addEventListener","promises","map","horsesP","race","then","param","concat","raceCounter1","raceCounter","tr","insertAdjacentHTML","$429f368ed271f71c$var$updateResultTable","all","$429f368ed271f71c$var$waitForAll"],"version":3,"file":"01-racetrack.b165c099.js.map"}